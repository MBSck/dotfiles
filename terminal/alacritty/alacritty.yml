# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Live config reload (changes require restart)
live_config_reload: true

# The transparant background color
background_opactiy: 1

# Display tabs using this many cells
tabspaces: 4

# Set environment variables
env:
  TERM: xterm-256color

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux) user login shell
#   - (Windows) powershell
shell:
  program: /usr/local/bin/tmux
  args:
    - -u # force UTF-8 in tmux

# Window configuration
window:
  dynamic_resize: true
  startup_mode: Maximized
  decorations: full
  resizable: true
  vsync: true
  show_cursor: false

# Font configuration
font:
  # Normal (roman) font face
  normal:
    family: JetBrainsMono Nerd Font
    style: Regular

  # Bold font face
  bold:
    family: JetBrainsMono Nerd Font
    style: Bold

  # Italic font face
  italic:
    family: JetBrainsMono Nerd Font
    style: Italic

  # Bold italic font face
  bold_italic:
    family: JetBrainsMono Nerd Font
    style: Bold Italic

  # Point size
  size: 17.5

    # Offset
    # offset:
    #   x: 0
    #   y: 0

    # Glyph offset
    # glyph_offset:
    #   x: 0
    #   y: 0


# Enable custom cursor colors
custom_cursor_colors: true

# Color configuration
colors:
  name: Invisibone
  author: Baskerville
  primary:
    background: "#232323"
    foreground: "#A0A0A0"
  # Cursor color configuration
  cursor:
    text:   '0xf1c1c1'
    cursor: '0xff2600'
  normal:
    black: "#303030"
    red: "#D370A3"
    green: "#6D9E3F"
    yellow: "#B58858"
    blue: "#6095C5"
    magenta: "#AC7BDE"
    cyan: "#3BA275"
    white: "#CFCFCF"
  bright:
    black: "#686868"
    red: "#FFA7DA"
    green: "#A3D572"
    yellow: "#EFBD8B"
    blue: "#98CBFE"
    magenta: "#E5B0FF"
    cyan: "#75DAA9"
    white: "#FFFFFF"

# If this is `true`, the cursor is temporarily hidden when typing.
hide_when_typing: true

cursor:
  # Cursor styles:
  #   - â–‡ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  blinking: off
  blink-interval: 750

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# History
scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  auto_scroll: false

# Debug configuration
debug:
  # Should display the render timer
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - OFF
  #   - ERROR
  #   - WARN
  #   - INFO
  #   - DEBUG
  #   - TRACE
  log_level: OFF

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false

url:
  # URL launcher
  #
  # This program is executed when clicking on a text which is recognized as a URL.
  # The URL is always added to the command as the last parameter.
  #
  # When set to `None`, URL launching will be disabled completely.
  #
  # Default:
  #   - (macOS) open
  #   - (Linux) xdg-open
  #   - (Windows) explorer
  #launcher:
  #  program: xdg-open
  #  args: []

  # URL modifiers
  #
  # These are the modifiers that need to be held down for opening URLs when clicking
  # on them. The available modifiers are documented in the key binding section.
  modifiers: None


# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F12
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `None` action.
key_bindings:
  # Enable German MacOS-keybindings. If do not work can be made to by alt + n
  - { key: 28, mods: Alt, chars: "{" }
  - { key: 25, mods: Alt, chars: "}" }
  - { key: 37, mods: Alt, chars: "@" }
  - { key: 26, mods: Alt|Shift, chars: "\\" }
  - { key: 26, mods: Alt, chars: "|" }
  - { key: 45, mods: Alt, chars: "~" }
  - { key: 23, mods: Alt, chars: "[" }
  - { key: 22, mods: Alt, chars: "]" }

  # Toggle fullscreen with command and enter
  - { key: 36, mods: Command, action: ToggleFullscreen }

  # Free up mappings, which are redundant and can be used with tmux.
  # Bindings are always filled by default, but will be replaced when a new
  # binding with the same triggers is defined. To unset a default binding, it can
  # be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
  # a no-op if you do not wish to receive input characters for that binding.
  - { key: PageUp,   mods: Shift,         mode: ~Alt,        action: ReceiveChar }
  - { key: PageDown, mods: Shift,         mode: ~Alt,        action: ReceiveChar }
  - { key: Home,     mods: Shift,         mode: ~Alt,        action: ReceiveChar }
  - { key: End,      mods: Shift,         mode: ~Alt,        action: ReceiveChar }
  - { key: K,        mods: Command,       mode: ~Vi|~Search, action: ReceiveChar }
  # searching
  - { key: F,        mods: Control|Shift, mode: ~Search,     action: ReceiveChar }
  - { key: F,        mods: Command,       mode: ~Search,     action: ReceiveChar }
  - { key: B,        mods: Control|Shift, mode: ~Search,     action: ReceiveChar }
  - { key: B,        mods: Command,       mode: ~Search,     action: ReceiveChar }
  # copy/paste
  - { key: Paste,                                            action: ReceiveChar }
  - { key: Copy,                                             action: ReceiveChar }
  - { key: V,        mods: Control|Shift, mode: ~Vi,         action: ReceiveChar }
  - { key: V,        mods: Command,                          action: ReceiveChar }
  - { key: C,        mods: Control|Shift,                    action: ReceiveChar }
  - { key: C,        mods: Command,                          action: ReceiveChar }
  - { key: C,        mods: Control|Shift, mode: Vi|~Search,  action: ReceiveChar }
  - { key: C,        mods: Command,       mode: Vi|~Search,  action: ReceiveChar }
  - { key: Insert,   mods: Shift,                            action: ReceiveChar }

# Mouse bindings. Frees up the right click for tmux
mouse_bindings:
  - { mouse: Right,  action: ReceiveChar }
