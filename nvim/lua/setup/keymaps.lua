return {
    keymap_table = keymap_table,
    which_key = {
        visual = {
            maps = {
                j = {
                    name = 'Java',
                    a = { '<cmd>lua require("jdtls").code_action(true)', 'Code Action' },
                    e = { '<cmd>lua require("jdtls").extract_variable(true)', 'Extract Variable' },
                    c = { '<cmd>lua require("jdtls").extract_constant(true)', 'Extract Constant' },
                    m = { '<cmd>lua require("jdtls").extract_method(true)', 'Extract Method' },
                },
                ['c'] = { '"*y', 'Copy selection to system clipboard' },
                l = {
                    name = 'LSP',
                    a = { '<cmd>lua vim.lsp.buf.range_code_action()<CR>', 'Range Code Action' },
                },
            },
            opts = {
                prefix = '<leader>',
                noremap = true,
                silent = true,
                mode = 'v',
            },
        },
        normal = {
            maps = {
                f = {
                    name = 'File',
                    b = { '<cmd>lua require("telescope.builtin").buffers()<CR>', 'Buffers' },
                    f = { '<cmd>lua require("telescope.builtin").find_files()<CR>', 'Files' },
                    w = { '<cmd>lua require("telescope").extensions.file_browser.file_browser()<CR>', 'File Browser' },
                    o = { '<cmd>lua require("telescope.builtin").oldfiles()<CR>', 'Prev Open Files' },
                },
                v = {
                    name = 'Vim',
                    q = { '<cmd>lua require("telescope.builtin").quickfix()<CR>', 'Quickfix List' },
                    l = { '<cmd>lua require("telescope.builtin").loclist()<CR>', 'Location List' },
                    j = { '<cmd>lua require("telescope.builtin").jumplist()<CR>', 'Jump List' },
                    c = { '<cmd>lua require("telescope.builtin").commands()<CR>', 'Commands' },
                    h = { '<cmd>lua require("telescope.builtin").command_history()<CR>', 'Command History' },
                    s = { '<cmd>lua require("telescope.builtin").search_history()<CR>', 'Search History' },
                    m = { '<cmd>lua require("telescope.builtin").man_pages()<CR>', 'Man Pages' },
                    k = { '<cmd>lua require("telescope.builtin").marks()<CR>', 'Marks' },
                    o = { '<cmd>lua require("telescope.builtin").colorscheme()<CR>', 'Colorscheme' },
                    r = { '<cmd>lua require("telescope.builtin").registers()<CR>', 'Registers' },
                    a = { '<cmd>lua require("telescope.builtin").autocommands()<CR>', 'Autocommands' },
                    p = { '<cmd>lua require("telescope.builtin").vim_options()<CR>', 'Vim Options' },
                    e = { '<cmd>lua require("telescope.builtin").spell_suggest()<CR>', 'Spell Suggestions' },
                    y = { '<cmd>lua require("telescope.builtin").keymaps()<CR>', 'Normal Mode Keymaps' },
                },
                p = {
                    name = 'Grep',
                    g = { '<cmd>lua require("telescope.builtin").grep_string()<CR>', 'Grep String' },
                    l = { '<cmd>lua require("telescope.builtin").live_grep()<CR>', 'Live Grep' },
                    r = {
                        '<cmd>lua require("telescope").extensions.live_grep_args.live_grep_args()<CR>',
                        'Live Grep Raw',
                    },
                    s = { '<cmd>lua require("spectre").open()<CR>', 'Spectre' },
                    w = {
                        '<cmd>lua require("spectre").open_visual({select_word = true})<CR>',
                        'Spectre Current Word',
                    },
                },
                g = {
                    name = 'Git',
                    f = { '<cmd>lua require("telescope.builtin").git_files()<CR>', 'Files' },
                    s = { '<cmd>lua require("telescope.builtin").git_status()<CR>', 'Status' },
                    c = { '<cmd>lua require("telescope.builtin").git_commits()<CR>', 'Commit Log' },
                    l = { '<cmd>lua require("telescope.builtin").git_bcommits()<CR>', 'Commit Log Current Buffer' },
                    b = { '<cmd>lua require("telescope.builtin").git_branches()<CR>', 'Branches' },
                    t = { '<cmd>lua require("telescope.builtin").git_stash()<CR>', 'Stash' },
                    d = { ':DiffviewOpen<CR>', 'Open Diff View' },
                    x = { ':DiffviewClose<CR>', 'Close Diff View' },
                    r = { ':DiffviewRefresh<CR>', 'Diff View Refresh' },
                    e = { ':DiffviewFocusFiles<CR>', 'Diff View Focus Files' },
                    h = { ':DiffviewFileHistory<CR>', 'Diff View File History' },
                    g = { '<cmd>lua require("setup.neotree").neogit("git")<CR>', 'Neo-tree git' },
                },
                l = {
                    name = 'LSP',
                    a = { '<cmd>lua vim.lsp.buf.code_action()<CR>', 'Code Actions' },
                    b = { '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', 'Show line diagnostics' },
                    d = { '<cmd>lua require("telescope.builtin").lsp_definitions()<CR>', 'Definitions' },
                    e = { '<cmd>lua require("telescope.builtin").treesitter()<CR>', 'Treesitter' },
                    g = {
                        '<cmd>lua require("telescope.builtin").lsp_document_diagnostics()<CR>',
                        'Document Diagnostics',
                    },
                    i = { '<cmd>lua require("telescope.builtin").lsp_implementations()<CR>', 'Implementations' },
                    l = { '<cmd>lua vim.lsp.codelens.run()<CR>', 'Code Lens' },
                    m = { '<cmd>lua vim.lsp.buf.rename()<CR>', 'Rename symbol' },
                    o = {
                        '<cmd>lua require("telescope.builtin").diagnostics()<CR>',
                        'Workspace Diagnostics',
                    },
                    q = { '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', 'Diagnostic set loclist' },
                    r = { '<cmd>lua require("telescope.builtin").lsp_references()<CR>', 'References' },
                    s = { '<cmd>lua require("telescope.builtin").lsp_document_symbols()<CR>', 'Document Symbols' },
                    t = { '<cmd>lua require("telescope.builtin").lsp_type_definitions()<CR>', 'Type Definitions' },
                    v = {
                        '<cmd>lua require("telescope.builtin").lsp_dynamic_workspace_symbols()<CR>',
                        'Dynamic Workspace Symbols',
                    },
                    w = {
                        '<cmd>lua require("telescope.builtin").lsp_workspace_symbols()<CR>',
                        'Workspace Symbols',
                    },
                },
                t = {
                    name = 'Telescope',
                    s = { '<cmd>lua require("telescope.builtin").planets()<CR>', 'Use Telescope...' },
                    c = { '<cmd>lua require("telescope.builtin").builtin()<CR>', 'Builtin Pickers' },
                    h = { '<cmd>lua require("telescope.builtin").reloader()<CR>', 'Reload Lua Modules' },
                    y = {
                        '<cmd>lua require("telescope.builtin").symbols({"emoji", "kaomoji", "gitmoji", "julia", "math", "nerd"})<CR>',
                        'List Symbols',
                    },
                    m = { '<cmd>lua require("telescope.builtin").resume()<CR>', 'Resume Last Picker' },
                    r = { '<cmd>lua require("telescope.builtin").pickers()<CR>', 'Previous Pickers' },
                },
                d = {
                    name = 'Debug Adapter',
                    c = { '<cmd>lua require("telescope").extensions.dap.commands()<CR>', 'Commands' },
                    f = { '<cmd>lua require("telescope").extensions.dap.configurations()<CR>', 'Configurations' },
                    b = { '<cmd>lua require("telescope").extensions.dap.list_breakpoints()<CR>', 'Breakpoints' },
                    v = { '<cmd>lua require("telescope").extensions.dap.variables()<CR>', 'Variables' },
                    r = { '<cmd>lua require("telescope").extensions.dap.frames()<CR>', 'Frames' },
                },
                r = {
                    name = 'Rust',
                    r = { ':RustRunnables<CR>', 'Runnables' },
                    d = { ':RustDebuggables<CR>', 'Debuggables' },
                    e = { ':RustExpandMacro<CR>', 'Expand Macro' },
                    c = { ':RustOpenCargo<CR>', 'Open Cargo.toml' },
                    g = { ':RustViewCrateGraph<CR>', 'View Crate Graph' },
                    m = { ':RustParentModule<CR>', 'Parent Module' },
                    j = { ':RustJoinLines<CR>', 'Join Lines' },
                    a = { ':RustHoverActions<CR>', 'Hover Actions' },
                    h = { ':RustHoverRange<CR>', 'Range Hover Actions' },
                    b = { ':RustMoveItemDown<CR>', 'Move Item Down' },
                    u = { ':RustMoveItemUp<CR>', 'Move Item Up' },
                    s = { ':RustStartStandaloneServerForBuffer<CR>', 'New Server for Buffer' },
                    t = { '<cmd>require("setup.toggleterm").run_float("cargo test")<CR>', 'Run tests' },
                },
                j = {
                    name = 'Java',
                    a = { '<cmd>lua require("jdtls").code_action()', 'Code Action' },
                    r = { '<cmd>lua require("jdtls").code_action(false, "refactor")', 'Refactor' },
                    o = { '<cmd>lua require("jdtls").organize_imports()', 'Organize Imports' },
                    e = { '<cmd>lua require("jdtls").extract_variable()', 'Extract Variable' },
                    c = { '<cmd>lua require("jdtls").extract_constant()', 'Extract Constant' },
                    m = { '<cmd>lua require("jdtls").extract_method()', 'Extract Method' },
                    t = { '<cmd>lua require("jdtls").test_class()', 'Test Class' },
                    n = { '<cmd>lua require("jdtls").test_nearest_method()', 'Test Nearest Method' },
                },
                s = {
                    name = 'Shell',
                    a = { ':ToggleTermOpenAll<CR>', 'Open All' },
                    c = { ':ToggleTermCloseAll<CR>', 'Open All' },
                    h = { ':ToggleTerm direction=horizontal<CR>', 'Horizontal' },
                    v = { ':ToggleTerm direction=vertical<CR>', 'Vertical' },
                    f = { ':ToggleTerm direction=float<CR>', 'Float' },
                },
                a = {
                    name = 'Aerial',
                    t = { ':AerialToggle<CR>', 'Toggle' },
                    a = { ':AerialOpenAll<CR>', 'Open All' },
                    c = { ':AerialCloseAll<CR>', 'Close All' },
                    s = { ':AerialTreeSyncFolds<CR>', 'Sync code folding' },
                    i = { ':AerialInfo<CR>', 'Info' },
                },
                o = {
                    name = 'Overseer',
                    t = { '<cmd>lua require("sidebar"):toggle("overseer")<CR>', 'Toggle' },
                    s = { ':OverseerSaveBundle<CR>', 'Save' },
                    l = { ':OverseerLoadBundle<CR>', 'Load' },
                    d = { ':OverseerDeleteBundle<CR>', 'Delete' },
                    c = { ':OverseerRunCmd<CR>', 'Run shell command' },
                    r = { ':OverseerRun<CR>', 'Run task' },
                    b = { ':OverseerBuild<CR>', 'Open task builder' },
                    q = { ':OverseerQuickAction<CR>', 'Run action on a task' },
                    a = { ':OverseerTaskAction<CR>', 'Select a task to run an action on' },
                },
            },
            opts = {
                prefix = '<leader>',
                noremap = true,
                silent = true,
                mode = 'n',
            },
        },
    },
    map_keys = function()
        for _, keymap in pairs(keymap_table) do
            local opts = vim.tbl_extend('force', { desc = keymap.description }, keymap.opts)
            vim.keymap.set(keymap.modes, keymap.shortcut, keymap.cmd, opts)
        end
    end,
}
